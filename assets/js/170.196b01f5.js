(window.webpackJsonp=window.webpackJsonp||[]).push([[170],{588:function(s,t,a){"use strict";a.r(t);var n=a(15),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"如何理解-ts-中的-extends-和-infer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何理解-ts-中的-extends-和-infer"}},[s._v("#")]),s._v(" 如何理解 ts 中的 extends 和 infer")]),s._v(" "),a("h3",{attrs:{id:"extends"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extends"}},[s._v("#")]),s._v(" extends")]),s._v(" "),a("blockquote",[a("p",[s._v("条件类型是一种条件表达式进行类型的关系检测。")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("U")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("X")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Y")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("分两种情况：")]),s._v(" "),a("ol",[a("li",[s._v("如果 T 不是一个联合类型，表示如果 T 是 U 的子集，那么返回 X 否则返回 Y。")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" type TExtends"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("U")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("U")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" never"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// T(number)是 U(number | string)的子集，所以返回number")]),s._v("\ntype TExtendsExample1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" TExtends"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// number")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// T(boolean) 不是 U(number | string)的子集，所以返回never")]),s._v("\ntype TExtendsExample2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" TExtends"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// never")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("如果 T 是一个联合类型，表示如果 T 中的类型是 U 的子集，那么返回 X 否则返回 Y。这个过程可以理解为对T中的类型进行一次遍历，每个类型都执行一次 extends。")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("type NonNullable"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" never "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// T(number | string) 不是 U(null | undefined) 的子集，所以返回 T")]),s._v("\ntype TNonNullableExample1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" NonNullable"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("number "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// number | string")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// T(string | null) 中 string 不是 U 的子集返回 string，null 是 U 的子集，返回 never")]),s._v("\ntype TNonNullableExample2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" NonNullable"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("string "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// string")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"infer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#infer"}},[s._v("#")]),s._v(" infer")]),s._v(" "),a("blockquote",[a("p",[s._v("infer 表示在 extends 条件语句中待推断的类型变量。")])]),s._v(" "),a("p",[s._v("在extends语句中，还支持infer关键字，可以推断一个类型变量，高效的对类型进行模式匹配。但是，这个类型变量只能在true的分支中使用。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("type ParamType"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("param"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" infer "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("P")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" any "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("P")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("在这个条件语句 "),a("code",[s._v("T extends (param: infer P) => any ? P : T")]),s._v(" 中，infer P 表示待推断的函数参数。")]),s._v(" "),a("p",[s._v("整句表示为：如果 T 能赋值给 "),a("code",[s._v("(param: infer P) => any")]),s._v("，则结果是 "),a("code",[s._v("(param: infer P) => any")]),s._v(" 类型中的参数 P，否则返回为 T。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  age"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\ntype "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("Func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("user"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v("\n\ntype Param "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ParamType"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Func"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Param = User")]),s._v("\ntype "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AA")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ParamType"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// string")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h4",{attrs:{id:"参考文章链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章链接"}},[s._v("#")]),s._v(" 参考文章链接")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/zhangguicheng/p/15745689.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("如何理解 TS 类型编程中的 extends 和 infer"),a("OutboundLink")],1),a("br"),s._v(" "),a("a",{attrs:{href:"https://juejin.cn/post/6844903796997357582",target:"_blank",rel:"noopener noreferrer"}},[s._v("巧用 TypeScript（五）-- infer"),a("OutboundLink")],1),a("br"),s._v(" "),a("a",{attrs:{href:"https://blog.csdn.net/qq_34436866/article/details/105907418",target:"_blank",rel:"noopener noreferrer"}},[s._v("白话typescript中的【extends】和【infer】"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);