(window.webpackJsonp=window.webpackJsonp||[]).push([[571],{988:function(t,_,v){"use strict";v.r(_);var r=v(15),h=Object(r.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"http1-0"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http1-0"}},[t._v("#")]),t._v(" http1.0")]),t._v(" "),v("p",[t._v("HTTP1.0最早在网页中使用是在1996年，那个时候只是使用一些较为简单的网页上和网络请求上,是一种"),v("strong",[t._v("无状态、无连接")]),t._v("的应用层协议，几年后被HTTP1.1代替并广泛使用")]),t._v(" "),v("h2",{attrs:{id:"http1-1"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http1-1"}},[t._v("#")]),t._v(" http1.1")]),t._v(" "),v("ol",[v("li",[t._v("http1.1基于"),v("strong",[t._v("文本解析")]),t._v(",把所有请求和响应作为纯文本")]),t._v(" "),v("li",[t._v("http1.1加入了"),v("strong",[t._v("缓存处理（强缓存和协商缓存）")])]),t._v(" "),v("li",[t._v("http1.1拥有长连接，并支持请求"),v("strong",[t._v("管道化")]),t._v("（"),v("code",[t._v("pipelining")]),t._v("），")]),t._v(" "),v("li",[t._v("http1.1流控制基于"),v("strong",[t._v("tcp连接")]),t._v("。当连接建立时，两端通过系统默认机制建立缓冲区。并通过ack报文来通知对方接收窗口大小，因为http1.1 依靠传输层来避免流溢出，每个tcp连接需要一个独立的流控制机制")])]),t._v(" "),v("h4",{attrs:{id:"缓存处理-强缓存和协商缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缓存处理-强缓存和协商缓存"}},[t._v("#")]),t._v(" "),v("strong",[t._v("缓存处理（强缓存和协商缓存）")])]),t._v(" "),v("p",[t._v("浏览器缓存能优化性能，而浏览器缓存分为"),v("strong",[t._v("强缓存")]),t._v("和"),v("strong",[t._v("协商缓存")]),t._v("，都是从客户端读取缓存 "),v("strong",[t._v("强缓存")])]),t._v(" "),v("ol",[v("li",[t._v("强缓存不发送请求，直接读取资源，可以获得返回200的状态码")]),t._v(" "),v("li",[t._v("利用http头中的"),v("code",[t._v("Expires")]),t._v("和"),v("code",[t._v("Cache-Control")]),t._v("两个字段来控制，都用来表示资源的缓存时间，Expires能设置失效时间，而Cache-Control能做到更多选项更细致，如果同时设置的话，其优先级"),v("strong",[t._v("高于")]),t._v("Expires")])]),t._v(" "),v("p",[v("strong",[t._v("协商缓存")])]),t._v(" "),v("ol",[v("li",[t._v("通过服务器来确定缓存资源是否可用，通过request header判断是否命中请求，命中后返回304状态码，并返回新的request header通知客户端从缓存里取")]),t._v(" "),v("li",[t._v("普通刷新会启用弱缓存，忽略强缓存。只有在地址栏或收藏夹输入网址、通过链接引用资源等情况下，浏览器才会启用强缓存")]),t._v(" "),v("li",[t._v("如果时间过期，则向服务器发送header带有If-None-Match和If-Modified-Since的请求，回到1")])]),t._v(" "),v("h2",{attrs:{id:"http2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http2"}},[t._v("#")]),t._v(" http2")]),t._v(" "),v("ol",[v("li",[t._v("http2相比于http1.1，"),v("strong",[t._v("性能")]),t._v("大幅度提升")]),t._v(" "),v("li",[t._v("http2通过一个连接来"),v("strong",[t._v("多路复用")])]),t._v(" "),v("li",[t._v("http2拥有"),v("strong",[t._v("头部压缩")])]),t._v(" "),v("li",[t._v("http2拥有"),v("strong",[t._v("新的二进制格式")]),t._v("，使用二进制框架层把所有消息封装成二进制，且仍然保持http语法")]),t._v(" "),v("li",[t._v("http2允许客户端和服务器端实现他们自己的流控制机制，而不是依赖传输层,两端在传输层交换可用的缓冲区大小，来让他们在多路复用流上设置自己的接收窗口")]),t._v(" "),v("li",[t._v("http2让服务器可以将响应主动“"),v("strong",[t._v("推送")]),t._v("”到客户端缓存中")])]),t._v(" "),v("h4",{attrs:{id:"htpp2头部压缩"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#htpp2头部压缩"}},[t._v("#")]),t._v(" htpp2头部压缩")]),t._v(" "),v("ol",[v("li",[t._v("http2头部压缩又称为"),v("strong",[t._v("HAPCK")]),t._v("，"),v("strong",[t._v("设计简单而灵活")]),t._v("，是因为HPACK格式有意地"),v("code",[t._v("简单")]),t._v("且"),v("code",[t._v("不灵活")]),t._v("能降低由于实现错误而导致的互操作性或安全问题的风险")]),t._v(" "),v("li",[t._v("http1.1没有头部压缩，随着请求增加，冗余头部字段会不必要地占用带宽，从而显着增加延迟，而头部压缩可消除冗余报头字段，限制已知安全攻击的漏洞，并且在受限环境中使用有限的内存要求")])]),t._v(" "),v("h4",{attrs:{id:"http2多路复用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http2多路复用"}},[t._v("#")]),t._v(" http2多路复用")]),t._v(" "),v("ol",[v("li",[t._v("http 性能优化的关键并不在于高带宽，而是低延迟")]),t._v(" "),v("li",[t._v("tcp 连接会随着时间进行自我「调谐」，起初会限制连接的最大速度，如果数据成功传输，会随着时间的推移提高传输的速度,这种调谐则被称为 tcp 慢启动,由于这种原因，让原本就具有突发性和短时性的 http 连接变的十分低效")]),t._v(" "),v("li",[t._v("http/2 通过让所有数据流共用同一个连接，可以更有效地使用 tcp 连接，让高带宽也能真正的服务于 http 的性能提升。而http1.1存在低性能的线头阻塞，一旦有一个请求超时，便会出现阻塞等待的情况")])]),t._v(" "),v("h2",{attrs:{id:"http3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http3"}},[t._v("#")]),t._v(" http3")]),t._v(" "),v("p",[t._v("之前说了http2，那么http3就是为了解决http2相关问题而诞生，它基于一个新的传输层协议"),v("strong",[t._v("QUIC")]),t._v("，而http3就是建立一个在QUIC上运行的HTTP新规范，而http3之前的版本都是基于TCP，QUIC就是为了替代TCP，解决TCP的一些缺陷")]),t._v(" "),v("h4",{attrs:{id:"tcp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[t._v("#")]),t._v(" tcp")]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("不支持流级复用")]),t._v("，TCP会将所有对象序列化在同一个流中，因此，它不知道TCP段的对象级分区，无法在同一个流中复用数据包")]),t._v(" "),v("li",[v("strong",[t._v("会产生冗余通信")]),t._v("，tco三次连接握手会有冗余的消息交换序列")]),t._v(" "),v("li",[v("strong",[t._v("可能会间歇性地挂起数据传输")]),t._v("，tcp中有个因为序列顺序处理丢失的问题的缺陷称为行头阻塞")])]),t._v(" "),v("h4",{attrs:{id:"quic"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#quic"}},[t._v("#")]),t._v(" QUIC")]),t._v(" "),v("ol",[v("li",[t._v("同样拥有"),v("strong",[t._v("头部压缩")]),t._v("，并优化了对乱序发送的支持，也优化了压缩率")]),t._v(" "),v("li",[t._v("放弃tcp，通过"),v("strong",[t._v("udp")]),t._v("建立，提高了连接建立的速度，降低了延迟")]),t._v(" "),v("li",[t._v("tcp本身是无法解决"),v("strong",[t._v("队头拥塞")]),t._v("，quic则"),v("strong",[t._v("解决")]),t._v("了这个问题")]),t._v(" "),v("li",[t._v("Connection ID使得http3支持"),v("strong",[t._v("连接迁移")]),t._v("以及NAT的重绑定")])]),t._v(" "),v("h4",{attrs:{id:"参考文章链接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考文章链接"}},[t._v("#")]),t._v(" 参考文章链接")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://juejin.cn/post/7001510315514937375",target:"_blank",rel:"noopener noreferrer"}},[t._v("一文总结http1.0，http1.1，http2，http3，面试强心剂"),v("OutboundLink")],1),v("br"),t._v(" "),v("a",{attrs:{href:"https://juejin.cn/post/6995109407545622542",target:"_blank",rel:"noopener noreferrer"}},[t._v("解读 HTTP1/HTTP2/HTTP3"),v("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=h.exports}}]);