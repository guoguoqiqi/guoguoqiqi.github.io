(window.webpackJsonp=window.webpackJsonp||[]).push([[305],{723:function(s,n,a){"use strict";a.r(n);var e=a(15),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"一、概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、概念"}},[s._v("#")]),s._v(" 一、概念")]),s._v(" "),a("p",[s._v("在一切开始前，有必要先理清一下这三个概念：")]),s._v(" "),a("ul",[a("li",[s._v("module: 模块，在webpack眼里，任何可以被导入导出的文件都是一个模块。")]),s._v(" "),a("li",[s._v("chunk: chunk是webpack拆分出来的：\n"),a("ul",[a("li",[s._v("每个入口文件都是一个chunk")]),s._v(" "),a("li",[s._v("通过 import、require 引入的代码也是")]),s._v(" "),a("li",[s._v("通过 splitChunks 拆分出来的代码也是")])])]),s._v(" "),a("li",[s._v("bundle: webpack打包出来的文件，也可以理解为就是对chunk编译压缩打包等处理后的产出。")])]),s._v(" "),a("h3",{attrs:{id:"二、问题分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、问题分析"}},[s._v("#")]),s._v(" 二、问题分析")]),s._v(" "),a("p",[s._v("首先，简单分析下，我们刚才提到的打包问题：")]),s._v(" "),a("ul",[a("li",[s._v("核心问题就是：多页应用打包后代码冗余，文件体积大。")]),s._v(" "),a("li",[s._v("究其原因就是：相同模块在不同入口之间没有得到复用，bundle之间比较独立。")])]),s._v(" "),a("p",[s._v("弄明白了问题的原因，那么大致的解决思路也就出来了：")]),s._v(" "),a("ul",[a("li",[s._v("我们在打包的时候，应该把不同入口之间，共同引用的模块，抽离出来，放到一个公共模块中。这样不管这个模块被多少个入口引用，都只会在最终打包结果中出现一次。————解决代码冗余。")]),s._v(" "),a("li",[s._v("另外，当我们把这些共同引用的模块都堆在一个模块中，这个文件可能异常巨大，也是不利于网络请求和页面加载的。所以我们需要把这个公共模块再按照一定规则进一步拆分成几个模块文件。————减小文件体积。")]),s._v(" "),a("li",[s._v("至于如何拆分，方式因人而异，因项目而异。我个人的拆分原则是：\n"),a("ul",[a("li",[s._v("业务代码和第三方库分离打包，实现代码分割；")]),s._v(" "),a("li",[s._v("业务代码中的公共业务模块提取打包到一个模块；")]),s._v(" "),a("li",[s._v("第三方库最好也不要全部打包到一个文件中，因为第三方库加起来通常会很大，我会把一些特别大的库分别独立打包，剩下的加起来如果还很大，就把它按照一定大小切割成若干模块。")])])])]),s._v(" "),a("h1",{attrs:{id:"optimization-splitchunks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#optimization-splitchunks"}},[s._v("#")]),s._v(" optimization.splitChunks")]),s._v(" "),a("p",[s._v("webpack提供了一个非常好的内置插件帮我们实现这一需求："),a("code",[s._v("CommonsChunkPlugin")]),s._v("。不过在 webpack4 中"),a("code",[s._v("CommonsChunkPlugin")]),s._v("被删除，取而代之的是"),a("code",[s._v("optimization.splitChunks")]),s._v(", 所幸的是"),a("code",[s._v("optimization.splitChunks")]),s._v("更强大！")]),s._v(" "),a("h3",{attrs:{id:"三、-实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、-实现"}},[s._v("#")]),s._v(" 三、 实现")]),s._v(" "),a("p",[s._v("通过一个多页应用的小demo，我们一步一步来实现上述思路的配置。")]),s._v(" "),a("p",[s._v("demo目录结构：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("|--public/\n|   |--a.html\n|   |--index.html\n|--src/\n|   |--a.js\n|   |--b.js\n|   |--c.js\n|   |--index.js\n|--package.json\n|--webpack.config.js\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("代码逻辑很简单，"),a("code",[s._v("index")]),s._v("模块中引用了 "),a("code",[s._v("a")]),s._v(" 和 "),a("code",[s._v("b")]),s._v(" 2个模块，"),a("code",[s._v("a")]),s._v(" 模块中引用了 "),a("code",[s._v("c")]),s._v(" 模块和 "),a("code",[s._v("jquery")]),s._v("库，"),a("code",[s._v("b")]),s._v(" 模块中也引用了 "),a("code",[s._v("c")]),s._v(" 模块和 "),a("code",[s._v("jquery")]),s._v(" 库，"),a("code",[s._v("c")]),s._v(" 是一个独立的模块没有其他依赖。")]),s._v(" "),a("p",[s._v("index.js代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//index.js\nimport a from './a.js';\nimport b from './b.js';\nfunction fn() {\n    console.log('index-------');\n}\nfn();\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("a.js代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//a.js\nrequire('./c.js');\nconst $ = require('jquery')\nfunction fn() {\n    console.log('a-------');\n}\nmodule.exports = fn();\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("b.js代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//b.js\nrequire('./c.js');\nconst $ = require('jquery')\nfunction fn() {\n    console.log('b-------');\n}\nmodule.exports = fn();\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("c.js代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//c.js\nfunction fn() {\n    console.log('c-------');\n}\nmodule.exports = fn();\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h4",{attrs:{id:"_1-基本配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本配置"}},[s._v("#")]),s._v(" 1. 基本配置")]),s._v(" "),a("p",[s._v("webpack先不做优化，只做基本配置，看看效果。项目配置了2个入口，搭配"),a("code",[s._v("html-webpack-plugin")]),s._v("实现多页打包：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n        a: './src/a.js'\n    },\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: '[name].js'\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './public/index.html',\n            filename: 'index.html'\n        }),\n        new HtmlWebpackPlugin({\n            template: './public/a.html',\n            filename: 'a.html'\n        })\n    ]\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[s._v("在开发模式下运行webpack：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/images/217.png",alt:"image"}})]),s._v(" "),a("p",[s._v("可以看到，打包出两个html和两个体积很大的（300多K）的文件"),a("code",[s._v("a.js")]),s._v(","),a("code",[s._v("index.js")]),s._v("。")]),s._v(" "),a("p",[s._v("进入dist目录检查js文件：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("a.js")]),s._v("里包含"),a("code",[s._v("c")]),s._v("模块代码和"),a("code",[s._v("jquery")]),s._v("代码")]),s._v(" "),a("li",[a("code",[s._v("index.js")]),s._v("里包含"),a("code",[s._v("a")]),s._v("模块、"),a("code",[s._v("b")]),s._v("模块、"),a("code",[s._v("c")]),s._v("模块和"),a("code",[s._v("jquery")]),s._v("代码")])]),s._v(" "),a("p",[s._v("看，同样的代码"),a("code",[s._v("c")]),s._v("和"),a("code",[s._v("jquery")]),s._v("被打包了2遍。")]),s._v(" "),a("h4",{attrs:{id:"_2-初步添加splitchunks优化配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-初步添加splitchunks优化配置"}},[s._v("#")]),s._v(" 2. 初步添加splitChunks优化配置")]),s._v(" "),a("p",[s._v("首先解决相同代码打包2次的问题，我们需要让webpack把"),a("code",[s._v("c")]),s._v("和"),a("code",[s._v("jquery")]),s._v("提取出来打包为公共模块。")]),s._v(" "),a("p",[s._v("在webpack配置文件添加splitChunks：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//webpack.config.js\n\noptimization: {\n    splitChunks: {\n        cacheGroups: {\n            default: {\n                name: 'common',\n                chunks: 'initial'\n            }\n        }\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h4",{attrs:{id:"cachegroups"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cachegroups"}},[s._v("#")]),s._v(" - cacheGroups")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("cacheGroups")]),s._v("是"),a("code",[s._v("splitChunks")]),s._v("配置的核心，对代码的拆分规则全在"),a("code",[s._v("cacheGroups")]),s._v("缓存组里配置。")]),s._v(" "),a("li",[s._v("缓存组的每一个属性都是一个配置规则，我这里给他的"),a("code",[s._v("default")]),s._v("属性进行了配置，属性名可以不叫default可以自己定。")]),s._v(" "),a("li",[s._v("属性的值是一个对象，里面放的我们对一个代码拆分规则的描述。")])]),s._v(" "),a("h4",{attrs:{id:"name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#name"}},[s._v("#")]),s._v(" - name")]),s._v(" "),a("ul",[a("li",[s._v("name：提取出来的公共模块将会以这个来命名，可以不配置，如果不配置，就会生成默认的文件名，大致格式是"),a("code",[s._v("index～a.js")]),s._v("这样的。")])]),s._v(" "),a("h4",{attrs:{id:"chunks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chunks"}},[s._v("#")]),s._v(" - chunks")]),s._v(" "),a("ul",[a("li",[s._v("chunks：指定哪些类型的chunk参与拆分，值可以是string可以是函数。如果是string，可以是这个三个值之一："),a("code",[s._v("all")]),s._v(", "),a("code",[s._v("async")]),s._v(", "),a("code",[s._v("initial")]),s._v("，"),a("code",[s._v("all")]),s._v(" 代表所有模块，"),a("code",[s._v("async")]),s._v("代表只管异步加载的, "),a("code",[s._v("initial")]),s._v("代表初始化时就能获取的模块。如果是函数，则可以根据chunk参数的name等属性进行更细致的筛选。")])]),s._v(" "),a("p",[s._v("再次打包：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/images/218.png",alt:"image"}})]),s._v(" "),a("p",[s._v("可以看到"),a("code",[s._v("a.js")]),s._v(","),a("code",[s._v("index.js")]),s._v("从300多K减少到6点几K。同时增加了一个"),a("code",[s._v("common.js")]),s._v("文件，并且两个打包入口都自动添加了"),a("code",[s._v("common.js")]),s._v("这个公共模块：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/images/219.png",alt:"image"}})]),s._v(" "),a("p",[s._v("进入dist目录，依次查看这3个js文件：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("a.js")]),s._v("里不包含任何模块的代码了，只有webpack生成的默认代码。")]),s._v(" "),a("li",[a("code",[s._v("index.js")]),s._v("里同样不包含任何模块的代码了，只有webpack生成的默认代码。")]),s._v(" "),a("li",[a("code",[s._v("common.js")]),s._v("里有"),a("code",[s._v("a")]),s._v(","),a("code",[s._v("b")]),s._v(","),a("code",[s._v("c")]),s._v(","),a("code",[s._v("index")]),s._v(","),a("code",[s._v("jquery")]),s._v("代码。")])]),s._v(" "),a("p",[s._v("发现，提是提取了，但是似乎跟我们预料的不太一样，所有的模块都跑到"),a("code",[s._v("common.js")]),s._v("里去了。")]),s._v(" "),a("p",[s._v("这是因为我们没有告诉webpack（"),a("code",[s._v("splitChunks")]),s._v("）什么样的代码为公共代码，"),a("code",[s._v("splitChunks")]),s._v("默认任何模块都会被提取。")]),s._v(" "),a("h4",{attrs:{id:"minchunks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minchunks"}},[s._v("#")]),s._v(" - minChunks")]),s._v(" "),a("p",[a("code",[s._v("splitChunks")]),s._v("是自带默认配置的，而缓存组默认会继承这些配置，其中有个"),a("code",[s._v("minChunks")]),s._v("属性：")]),s._v(" "),a("ul",[a("li",[s._v("它控制的是每个模块什么时候被抽离出去：当模块被不同entry引用的次数大于等于这个配置值时，才会被抽离出去。")]),s._v(" "),a("li",[s._v("它的默认值是1。也就是任何模块都会被抽离出去（入口模块其实也会被webpack引入一次）。")])]),s._v(" "),a("p",[s._v("我们上面没有配置"),a("code",[s._v("minChunks")]),s._v("，只配置了"),a("code",[s._v("name")]),s._v("和"),a("code",[s._v("chunk")]),s._v("两个属性，所以"),a("code",[s._v("minChunks")]),s._v("的默认值 "),a("code",[s._v("1")]),s._v(" 生效。也难怪所有的模块都被抽离到"),a("code",[s._v("common.js")]),s._v("中了。")]),s._v(" "),a("p",[s._v("优化一下，在缓存组里配置"),a("code",[s._v("minChunks")]),s._v("覆盖默认值：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//webpack.config.js\n\noptimization: {\n    splitChunks: {\n        cacheGroups: {\n            default: {\n                name: 'common',\n                chunks: 'initial',\n                minChunks: 2  //模块被引用2次以上的才抽离\n            }\n        }\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("然后运行webpack")]),s._v(" "),a("p",[a("img",{attrs:{src:"/images/220.png",alt:"image"}})]),s._v(" "),a("p",[s._v("可以看到有2个文件的大小发生了变化："),a("code",[s._v("common.js")]),s._v("由314K减小到311K，"),a("code",[s._v("index.js")]),s._v("由6.22K增大到7.56K。")]),s._v(" "),a("p",[s._v("进入dist目录查看：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("a.js")]),s._v("里依然不包含任何模块的代码（正常，因为"),a("code",[s._v("a")]),s._v("作为模块被"),a("code",[s._v("index")]),s._v("引入了一次，又作为入口被webpack引入了一次，所以"),a("code",[s._v("a")]),s._v("是有2次引用的）。")]),s._v(" "),a("li",[a("code",[s._v("index.js")]),s._v("里出现了"),a("code",[s._v("b")]),s._v("和"),a("code",[s._v("index")]),s._v("模块的代码了。")]),s._v(" "),a("li",[a("code",[s._v("common.js")]),s._v("里只剩"),a("code",[s._v("a")]),s._v(","),a("code",[s._v("c")]),s._v(",和"),a("code",[s._v("jquery")]),s._v("模块的代码。")])]),s._v(" "),a("p",[s._v("现在我们把共同引用的模块"),a("code",[s._v("a")]),s._v(", "),a("code",[s._v("c")]),s._v(", "),a("code",[s._v("jquery")]),s._v("，从"),a("code",[s._v("a")]),s._v("和"),a("code",[s._v("index")]),s._v("这两个入口模块里抽取到"),a("code",[s._v("common.js")]),s._v("里了。有点符合我们的预期了。")]),s._v(" "),a("h4",{attrs:{id:"_3-配置多个拆分规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-配置多个拆分规则"}},[s._v("#")]),s._v(" 3. 配置多个拆分规则")]),s._v(" "),a("h3",{attrs:{id:"_3-1-实现代码分离-拆分第三方库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-实现代码分离-拆分第三方库"}},[s._v("#")]),s._v(" 3.1 实现代码分离，拆分第三方库")]),s._v(" "),a("p",[s._v("接下来，我希望公共模块"),a("code",[s._v("common.js")]),s._v("中，业务代码和第三方模块jquery能够剥离开来。")]),s._v(" "),a("p",[s._v("我们需要再添加一个拆分规则。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//webpack.config.js\n\noptimization: {\n    splitChunks: {\n    \tminSize: 30,  //提取出的chunk的最小大小\n        cacheGroups: {\n            default: {\n                name: 'common',\n                chunks: 'initial',\n                minChunks: 2,  //模块被引用2次以上的才抽离\n                priority: -20\n            },\n            vendors: {  //拆分第三方库（通过npm|yarn安装的库）\n            \ttest: /[\\\\/]node_modules[\\\\/]/,\n                name: 'vendor',\n                chunks: 'initial',\n                priority: -10\n            }\n        }\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("我给cacheGroups添加了一个vendors属性（属性名可以自己取，只要不跟缓存组下其他定义过的属性同名就行，否则后面的拆分规则会把前面的配置覆盖掉）。")]),s._v(" "),a("h4",{attrs:{id:"minsize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minsize"}},[s._v("#")]),s._v(" - minSize")]),s._v(" "),a("p",[s._v("minSize设置的是生成文件的最小大小，单位是字节。如果一个模块符合之前所说的拆分规则，但是如果提取出来最后生成文件大小比minSize要小，那它仍然不会被提取出来。这个属性可以在每个缓存组属性中设置，也可以在splitChunks属性中设置，这样在每个缓存组都会继承这个配置。这里由于我的demo中文件非常小，为了演示效果，我把minSize设置为30字节，好让公共模块可以被提取出来，正常项目中不用设这么小。")]),s._v(" "),a("h4",{attrs:{id:"priority"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#priority"}},[s._v("#")]),s._v(" - priority")]),s._v(" "),a("p",[s._v("priority属性的值为数字，可以为负数。作用是当缓存组中设置有多个拆分规则，而某个模块同时符合好几个规则的时候，则需要通过优先级属性priority来决定使用哪个拆分规则。优先级高者执行。我这里给业务代码组设置的优先级为-20，给第三方库组设置的优先级为-10，这样当一个第三方库被引用超过2次的时候，就不会打包到业务模块里了。")]),s._v(" "),a("h4",{attrs:{id:"test"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test"}},[s._v("#")]),s._v(" - test")]),s._v(" "),a("p",[s._v("test属性用于进一步控制缓存组选择的模块，与chunks属性的作用有一点像，但是维度不一样。test的值可以是一个正则表达式，也可以是一个函数。它可以匹配模块的绝对资源路径或chunk名称，匹配chunk名称时，将选择chunk中的所有模块。我这里用了一个正则"),a("code",[s._v("/[\\\\/]node_modules[\\\\/]/")]),s._v("来匹配第三方模块的绝对路径，因为通过npm或者yarn安装的模块，都会存放在node_modules目录下。")]),s._v(" "),a("p",[s._v("运行一下webpack：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/images/221.png",alt:"image"}})]),s._v(" "),a("p",[s._v("可以看到新产生了一个叫"),a("code",[s._v("vendor.js")]),s._v("的文件（name属性的值），同时"),a("code",[s._v("common.js")]),s._v("文件体积由原来的311k减少到了861bytes！")]),s._v(" "),a("p",[s._v("进入dist目录，检查js文件：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("a.js")]),s._v("里不包含任何模块代码。")]),s._v(" "),a("li",[a("code",[s._v("common.js")]),s._v("只包含"),a("code",[s._v("a")]),s._v("和"),a("code",[s._v("c")]),s._v("模块的代码。")]),s._v(" "),a("li",[a("code",[s._v("index.js")]),s._v("只包含"),a("code",[s._v("b")]),s._v("和"),a("code",[s._v("index")]),s._v("模块的代码。")]),s._v(" "),a("li",[a("code",[s._v("vendor.js")]),s._v("只包含"),a("code",[s._v("jquery")]),s._v("模块的代码。")])]),s._v(" "),a("p",[s._v("现在，我们在上一步的基础上，成功从"),a("code",[s._v("common.js")]),s._v("里把第三方库"),a("code",[s._v("jquery")]),s._v("抽离出来放到了"),a("code",[s._v("vendor.js")]),s._v("里。")]),s._v(" "),a("h3",{attrs:{id:"_3-2-拆分指定文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-拆分指定文件"}},[s._v("#")]),s._v(" 3.2 拆分指定文件")]),s._v(" "),a("p",[s._v("如果我们还想把项目中的某一些文件单独拎出来打包（比如工程本地开发的组件库），可以继续添加拆分规则。比如我的src下有个"),a("code",[s._v("locallib.js")]),s._v("文件要单独打包，假设"),a("code",[s._v("a.js")]),s._v("中引入了它。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//a.js\nrequire('./c.js');\nrequire('./locallib.js');  //引入自己本地的库\nconst $ = require('jquery')\nfunction fn() {\n    console.log('a-------');\n}\nmodule.exports = fn();\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("可以这么配置：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//webpack.config.js\n\noptimization: {\n    splitChunks: {\n        minSize: 30,  //提取出的chunk的最小大小\n        cacheGroups: {\n            default: {\n                name: 'common',\n                chunks: 'initial',\n                minChunks: 2,  //模块被引用2次以上的才抽离\n                priority: -20\n            },\n            vendors: {  //拆分第三方库（通过npm|yarn安装的库）\n            \ttest: /[\\\\/]node_modules[\\\\/]/,\n                name: 'vendor',\n                chunks: 'initial',\n                priority: -10\n            },\n            locallib: {  //拆分指定文件\n            \ttest: /(src\\/locallib\\.js)$/,\n                name: 'locallib',\n                chunks: 'initial',\n                priority: -9\n            }\n        }\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("p",[s._v("我在缓存组下又新增了一个拆分规则，通过test正则指定我就要单独打包"),a("code",[s._v("src/locallib.js")]),s._v("文件，并且把优先级设置为-9，这样当它被多次引用时，不会进入其他拆分规则组，因为另外两个规则的优先级都比它要低。")]),s._v(" "),a("p",[s._v("运行webpack打包后：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/images/222.png",alt:"image"}})]),s._v(" "),a("p",[s._v("可以看到新产生了一个"),a("code",[s._v("locallib.js")]),s._v("文件。进入dist目录查看：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("a.js")]),s._v("里不包含任何模块代码。")]),s._v(" "),a("li",[a("code",[s._v("common.js")]),s._v("只包含"),a("code",[s._v("a")]),s._v("和"),a("code",[s._v("c")]),s._v("模块的代码。")]),s._v(" "),a("li",[a("code",[s._v("index.js")]),s._v("只包含"),a("code",[s._v("b")]),s._v("和"),a("code",[s._v("index")]),s._v("模块的代码。")]),s._v(" "),a("li",[a("code",[s._v("vendor.js")]),s._v("只包含"),a("code",[s._v("jquery")]),s._v("模块的代码。")]),s._v(" "),a("li",[a("code",[s._v("locallib.js")]),s._v("里只包含"),a("code",[s._v("locallib")]),s._v("模块的代码。")])]),s._v(" "),a("p",[s._v("现在我们又在上一步的基础上独立打包了一个指定的模块"),a("code",[s._v("locallib.js")]),s._v("。")]),s._v(" "),a("p",[s._v("至此，我们就成功实现了抽离公共模块、业务代码和第三方代码剥离、独立打包指定模块。")]),s._v(" "),a("p",[s._v("对比一下，优化前，打包出来js一共有633KB：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/images/223.png",alt:"image"}})]),s._v(" "),a("p",[s._v("优化后，打包出来js一共不到330KB：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/images/224.png",alt:"image"}})]),s._v(" "),a("p",[s._v("优化打包后的文件分类清晰，体积比优化前缩小了几乎50%，有点小完美是不是！击掌！这还只是我举的一个简单例子，在实际多页应用中，优化力度说不定还不止这么多。")]),s._v(" "),a("h4",{attrs:{id:"参考文章链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章链接"}},[s._v("#")]),s._v(" 参考文章链接")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6844904001792655373",target:"_blank",rel:"noopener noreferrer"}},[s._v("webpack优化之玩转代码分割和公共代码提取"),a("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=t.exports}}]);