(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{620:function(t,s,a){"use strict";a.r(s);var e=a(15),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("概念")]),t._v(" "),a("p",[t._v("diff算法是一种优化手段，将前后两个模块进行差异对比，修补(更新)差异的过程叫做patch(打补丁)")])]),t._v(" "),a("p",[t._v("为什么vue,react这些框架中都会有diff算法呢? 我们都知道渲染真实dom的开销是很大的，这个跟性能优化中的重绘重排意义类似, 回到正题来, 有时候我们修改了页面中的某个数据，如果直接渲染到真实DOM中会引起整棵数的重绘重排, 那么我们能不能只让我们修改的数据映射到真实DOM, 做一个最少化重绘重排呢，说到这里你应该对为什么使用diff算法有一个简单的概念了")]),t._v(" "),a("h3",{attrs:{id:"virtual-dom和真实dom的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#virtual-dom和真实dom的区别"}},[t._v("#")]),t._v(" virtual DOM和真实DOM的区别")]),t._v(" "),a("p",[t._v("一句话概括吧，virtual DOM是将真实的DOM的数据抽取出来，以对象的形式模拟树形结构, diff 算法比较的也是virtual DOM")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JS")]),t._v("每日一题\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换成VNode 类似于下面这种")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Vnode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'p'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'JS每日一题'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h3",{attrs:{id:"diff是怎么比较的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#diff是怎么比较的"}},[t._v("#")]),t._v(" diff是怎么比较的")]),t._v(" "),a("p",[t._v("简单的说就是新旧虚拟dom 的比较，如果有差异就以新的为准，然后再插入的真实的dom中，重新渲染")]),t._v(" "),a("p",[a("strong",[t._v("特点")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("只会做同级比较，不做跨级比较")])]),t._v(" "),a("li",[a("p",[t._v("比较后几种情况")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("if(oldVnode===vnode)，他们的引用一致，可以认为没有变化。")])]),t._v(" "),a("li",[a("p",[t._v("if(oldVnode.text!==null&&vnode.text!==null&&oldVnode.text!==vnode.text)，文本节点的比较，需要修改，则会调用 Node.textContent=vnode.text。")])]),t._v(" "),a("li",[a("p",[t._v("if(oldCh&&ch&&oldCh!==ch), 两个节点都有子节点，而且它们不一样，这样我们会调用 updateChildren函数比较子节点，这是diff的核心")])]),t._v(" "),a("li",[a("p",[t._v("elseif(ch)，只有新的节点有子节点，调用 createEle(vnode)， vnode.el已经引用了老的dom节点， createEle函数会在老dom节点上添加子节点。")])]),t._v(" "),a("li",[a("p",[t._v("elseif(oldCh)，新节点没有子节点，老节点有子节点，直接删除老节点。")])])])])]),t._v(" "),a("h3",{attrs:{id:"key的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key的作用"}},[t._v("#")]),t._v(" key的作用")]),t._v(" "),a("p",[t._v("设置key和不设置key的区别：")]),t._v(" "),a("p",[t._v("不设key，newCh和oldCh只会进行头尾两端的相互比较，设key后，除了头尾两端的比较外，还会从用key生成的对象 oldKeyToIdx中查找匹配的节点，所以为节点设置key可以更高效的利用dom")]),t._v(" "),a("p",[t._v("如我们希望可以在B和C之间加一个F，Diff算法默认执行起来是这样的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/122.png",alt:"image"}})]),t._v(" "),a("p",[t._v("即把C更新成F，D更新成C，E更新成D，最后再插入E，是不是很没有效率？")]),t._v(" "),a("p",[t._v("所以我们需要使用key来给每个节点做一个唯一标识，Diff算法就可以正确的识别此节点，找到正确的位置区插入新的节点。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/123.png",alt:"image"}}),t._v(" "),a("img",{attrs:{src:"/images/124.png",alt:"image"}})]),t._v(" "),a("p",[t._v("所以一句话，key的作用主要是为了高效的更新虚拟DOM。\n另外vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了让vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果")]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("尽量不要跨层级的修改dom")])]),t._v(" "),a("li",[a("p",[t._v("在开发组件时，保持稳定的 DOM 结构会有助于性能的提升")])]),t._v(" "),a("li",[a("p",[t._v("设置key可以让diff更高效")])])]),t._v(" "),a("h4",{attrs:{id:"参考文章链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章链接"}},[t._v("#")]),t._v(" 参考文章链接")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/aFuu5T7olFQWj-hS6MZAhw",target:"_blank",rel:"noopener noreferrer"}},[t._v("15 张图，20 分钟吃透 Diff 算法核心原理，我说的！！！"),a("OutboundLink")],1),a("br"),t._v(" "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&mid=2247490856&idx=2&sn=9a23e185edb2dc8105feff42db6fa97b&source=41#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("diff 算法深入一下？"),a("OutboundLink")],1),a("br"),t._v(" "),a("a",{attrs:{href:"https://juejin.cn/post/6844903895467032589",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入剖析：Vue核心之虚拟DOM"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);